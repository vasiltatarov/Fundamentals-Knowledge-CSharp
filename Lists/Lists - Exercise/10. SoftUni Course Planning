using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading;
using System.Net.Security;

namespace RealWorldExample
{
    class Program
    {
        static void Main()
        {
            List<string> scheduleCourse = Console.ReadLine().Split(", ").ToList();

            while (true)
            {
                List<string> command = Console.ReadLine().Split(":").ToList();

                if (command[0] == "course start")
                {
                    for (int i = 0; i < scheduleCourse.Count; i++)
                    {
                        Console.WriteLine($"{i + 1}.{scheduleCourse[i]}");
                    }
                    return;
                }
                else if (command[0] == "Add")
                {
                    AddLessonTitle(scheduleCourse, command);
                }
                else if (command[0] == "Insert")
                {
                    InsertLesson(scheduleCourse, command);
                }
                else if (command[0] == "Remove")
                {
                    RemoveLesson(scheduleCourse, command);
                }
                else if (command[0] == "Swap")
                {
                    GetSwapElements(scheduleCourse, command);
                }
                else if (command[0] == "Exercise")
                {
                    AddExercise(scheduleCourse, command);
                }
            }

        }

        static void AddExercise(List<string> scheduleCourse, List<string> command)
        {
            string lessonTitle = command[1];

            if (scheduleCourse.Contains(lessonTitle))
            {
                int index = scheduleCourse.IndexOf(lessonTitle);

                if (index + 1 < scheduleCourse.Count)
                {
                    if (scheduleCourse[index + 1] != $"{lessonTitle}-Exercise")
                    {
                        scheduleCourse.Insert(index + 1, $"{lessonTitle}-Exercise");
                    }
                }
                else
                {
                    scheduleCourse.Add($"{lessonTitle}-Exercise");
                }
            }
            else
            {
                scheduleCourse.Add(lessonTitle);
                scheduleCourse.Add($"{lessonTitle}-Exercise");
            }
        }

        static void GetSwapElements(List<string> lessons, List<string> command)
        {
            string firstTitle = command[1];
            string secondTitle = command[2];

            if (lessons.Contains(firstTitle) && lessons.Contains(secondTitle))
            {
                int firstTitleIndex = lessons.IndexOf(firstTitle);
                int secondTitleIndex = lessons.IndexOf(secondTitle);

                lessons[firstTitleIndex] = secondTitle;
                lessons[secondTitleIndex] = firstTitle;

                if (firstTitleIndex + 1 < lessons.Count && secondTitleIndex + 1 < lessons.Count)
                {
                    if (lessons[firstTitleIndex + 1] == $"{firstTitle}-Exercise" && lessons[secondTitleIndex + 1] == $"{secondTitle}-Exercise")
                    {
                        string temp = lessons[secondTitleIndex + 1];
                        lessons[secondTitleIndex + 1] = lessons[firstTitleIndex + 1];
                        lessons[firstTitleIndex + 1] = temp;
                    }
                    else if (lessons[firstTitleIndex + 1] == $"{firstTitle}-Exercise")
                    {
                        lessons.Insert(secondTitleIndex + 1, lessons[firstTitleIndex + 1]);

                        if (secondTitleIndex > firstTitleIndex)
                        {
                            lessons.RemoveAt(firstTitleIndex + 1);
                        }
                        else if (secondTitleIndex < firstTitleIndex)
                        {
                            lessons.RemoveAt(firstTitleIndex + 2);
                        }

                    }
                    else if (lessons[secondTitleIndex + 1] == $"{secondTitle}-Exercise")
                    {
                        lessons.Insert(firstTitleIndex + 1, lessons[secondTitleIndex + 1]);

                        if (firstTitleIndex < secondTitleIndex)
                        {
                            lessons.RemoveAt(secondTitleIndex + 2);
                        }
                        else if (firstTitleIndex > secondTitleIndex)
                        {
                            lessons.RemoveAt(secondTitleIndex + 1);
                        }
                    }
                }
                else if (firstTitleIndex + 1 < lessons.Count)
                {
                    if (lessons[firstTitleIndex + 1] == $"{firstTitle}-Exercise")
                    {
                        lessons.Insert(secondTitleIndex + 1, lessons[firstTitleIndex + 1]);

                        if (secondTitleIndex > firstTitleIndex)
                        {
                            lessons.RemoveAt(firstTitleIndex + 1);
                        }
                        else if (secondTitleIndex < firstTitleIndex)
                        {
                            lessons.RemoveAt(firstTitleIndex + 2);
                        }
                    }
                }
                else if (secondTitleIndex + 1 < lessons.Count)
                {
                    if (lessons[secondTitleIndex + 1] == $"{secondTitle}-Exercise")
                    {
                        lessons.Insert(firstTitleIndex + 1, lessons[secondTitleIndex + 1]);

                        if (firstTitleIndex < secondTitleIndex)
                        {
                            lessons.RemoveAt(secondTitleIndex + 2);
                        }
                        else if (firstTitleIndex > secondTitleIndex)
                        {
                            lessons.RemoveAt(secondTitleIndex + 1);
                        }
                    }
                }
            }
        }
        //string lessonTitle = command[1];
        //string lessonTitleRe = command[2];

        //if (scheduleCourse.Contains(lessonTitle) && scheduleCourse.Contains(lessonTitleRe))
        //{
        //    for (int i = 0; i < scheduleCourse.Count; i++)
        //    {
        //        if (scheduleCourse[i] == lessonTitle)
        //        {
        //            scheduleCourse[i] = lessonTitleRe;
        //            if (scheduleCourse[i + 1] == $"{lessonTitleRe}-Exercise")
        //            {
        //                scheduleCourse[i + 1] = $"{lessonTitleRe}-Exercise";
        //            }
        //            continue;
        //        }
        //        if (scheduleCourse[i] == lessonTitleRe)
        //        {
        //            scheduleCourse[i] = lessonTitle;
        //        }
        //    }
        //}
        //else
        //{
        //    return;
        //}
    

        static void RemoveLesson(List<string> scheduleCourse, List<string> command)
        {
            string lessonTitle = command[1];

            if (scheduleCourse.Contains(command[1]))
            {
                scheduleCourse.Remove(lessonTitle);
            }
            else
            {
                return;
            }
        }

        static void InsertLesson(List<string> scheduleCourse, List<string> command)
        {
            string lessonTitle = command[1];
            int index = int.Parse(command[2]);

            if (index >= 0 && index < scheduleCourse.Count && !scheduleCourse.Contains(command[1]))
            {
                scheduleCourse.Insert(index, lessonTitle);
            }
            else
            {
                return;
            }
        }

        static void AddLessonTitle(List<string> scheduleCourse, List<string> command)
        {
            string lessonTitle = command[1];

            if (! scheduleCourse.Contains(command[1]))
            {
                scheduleCourse.Add(lessonTitle);
            }
            else
            {
                return;
            }
        }
    }
}
