using System;
using System.Collections.Generic;
using System.Linq;

namespace List_Exercise
{
    class Program
    {
        static void Main()
        {
            List<string> data = Console.ReadLine().Split(" ", StringSplitOptions.RemoveEmptyEntries).ToList();
            string lines;

            while ((lines = Console.ReadLine()) != "3:1")
            {
                string[] command = lines.Split(" ", StringSplitOptions.RemoveEmptyEntries);

                if (command[0] == "merge")
                {
                    Merge(data, command);
                }
                else if (command[0] == "divide")
                {
                    Divide(data, command);
                }
            }

            Console.WriteLine(string.Join(" ", data));
        }

        public static void Divide(List<string> data, string[] command)
        {
            int index = int.Parse(command[1]);
            int partitions = int.Parse(command[2]);
            string element = data[index];
            int partLength = element.Length / partitions;
            int additionalPartLength = element.Length % partitions;

            List<string> temp = new List<string>();

            for (int i = 0; i < partitions; i++)
            {
                if (i == partitions - 1)
                {
                    partLength += additionalPartLength;
                }

                temp.Add(element.Substring(0, partLength));
                element = element.Remove(0, partLength);
            }

            data.RemoveAt(int.Parse(command[1]));
            data.InsertRange(int.Parse(command[1]), temp);
        }

        public static void Merge(List<string> data, string[] command)
        {
            int startIndex = int.Parse(command[1]);
            int endIndex = int.Parse(command[2]);
            string concatData = string.Empty;

            if (startIndex < 0)
            {
                if (endIndex >= 0 && endIndex < data.Count)
                {
                    startIndex = 0;
                }
            }

            if (endIndex > data.Count - 1)
            {
                if (startIndex >= 0 && startIndex <= data.Count)
                {
                    endIndex = data.Count - 1;
                }
            }

            if (startIndex < 0 && endIndex > data.Count - 1)
            {
                startIndex = 0;
                endIndex = data.Count - 1;
            }

            if ((startIndex >= 0 && startIndex < data.Count) && (endIndex >= 0 && endIndex < data.Count))
            {

                for (int i = startIndex; i <= endIndex; i++)
                {
                    concatData += data[i];
                }

                data.RemoveRange(startIndex, endIndex - startIndex + 1);
                data.Insert(startIndex, concatData);
            }
        }

    }
}
