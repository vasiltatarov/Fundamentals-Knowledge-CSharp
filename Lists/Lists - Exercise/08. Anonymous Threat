using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading;
using System.Net.Security;

namespace RealWorldExample
{
    class Program
    {
        static void Main()
        {
            List<string> virus = Console.ReadLine().Split(" ").ToList();

            while (true)
            {
                List<string> command = Console.ReadLine().Split().ToList();

                if (command[0] == "3:1")
                {
                    Console.WriteLine(string.Join(" ", virus));
                    return;
                }
                else if (command[0] == "merge")
                {
                    GetMerge(virus, command);
                }
                else if (command[0] == "divide")
                {
                    GetDivide(virus, command);
                }
            }
        }

        private static void GetMerge(List<string> virus, List<string> command)
        {
            int startIndex = int.Parse(command[1]);
            int endIndex = int.Parse(command[2]);

            if (startIndex < 0)
            {
                startIndex = 0;
            }
            else if (startIndex > virus.Count - 1)
            {
                startIndex = virus.Count - 1;
            }

            if (endIndex < 0)
            {
                endIndex = 0;
            }
            else if (endIndex > virus.Count - 1)
            {
                endIndex = virus.Count - 1;
            }

            List<string> temp = new List<string>();

            for (int i = startIndex; i <= endIndex; i++)
            {
                temp.Add(virus[i]);
            }

            virus[startIndex] = string.Join("", temp);

            for (int i = startIndex + 1; i <= endIndex; i++)
            {
                virus.RemoveAt(startIndex + 1);
            }
        }

        private static void GetDivide(List<string> virus, List<string> command)
        {
            List<string> temp = new List<string>();

            string toDivide = virus[int.Parse(command[1])];
            int partitions = int.Parse(command[2]);

            int partLength = toDivide.Length / int.Parse(command[2]);
            int additionalPartLength = toDivide.Length % int.Parse(command[2]);

            for (int i = 0; i < partitions; i++)
            {
                if (i == partitions - 1) partLength += additionalPartLength;
                temp.Add(toDivide.Substring(0, partLength));
                toDivide = toDivide.Remove(0, partLength);
            }

            virus.RemoveAt(int.Parse(command[1]));
            virus.InsertRange(int.Parse(command[1]), temp);

            //string toDivide = virus[int.Parse(command[1])];
            //int partitions = int.Parse(command[2]);

            //List<string> temp = new List<string>();

            //int partLength = toDivide.Length / partitions;
            //int additionalPartLength = toDivide.Length % partitions;

            //for (int i = 0; i < partitions; i++)
            //{
            //    if (i == partitions - 1)
            //    {
            //        partLength += additionalPartLength;
            //        temp.Add(toDivide.Substring(0, partLength));
            //        toDivide = toDivide.Remove(0, partLength);
            //    }
            //}

            //virus.RemoveAt(int.Parse(command[1]));
            //virus.InsertRange(int.Parse(command[1]), temp);
        }
    }
}
