You will be receiving lines in the following format: "{username}-{language}-{points}" until you receive "exam finished".
You should store each username and his submissions and points. You can receive a command to ban a user for cheating in the following
format: "{username}-banned". In that case, you should remove the user from the contest, but preserve his submissions in the total count
of submissions for each language.After receiving "exam finished" print each of the participants, ordered descending by their max points,
then by username, in the following format:
Input / Constraints
Until you receive "exam finished" you will be receiving participant submissions in following format: "{username}-{language}-{points}".
You can receive a ban command -> "{username}-banned" //
Pesho-Java-91
Gosho-C#-84
Kiro-Java-90
Kiro-C#-50
Kiro-banned
exam finished
Output
Print the exam results for each participant, ordered descending by max points and then by username, in the following format: 
Results:
{username} | {points}
After that print each language, ordered descending by total submissions and then by language name, in the following format:
Submissions:
{language} â€“ {submissionsCount}
Results:
Pesho | 91
Gosho | 84
Submissions:
C# - 2
Java - 2

            var results = new SortedDictionary<string, int>();
            var languages = new SortedDictionary<string, int>();

            string command = Console.ReadLine();
            while (command != "exam finished")
            {
                string[] examArgs = command.Split("-");

                string username = examArgs[0];
                string language = examArgs[1];

                if (examArgs[1] != "banned")
                {
                    if (languages.ContainsKey(language))
                    {
                        languages[language] += 1;
                    }
                    else
                    {
                        languages.Add(language, 1);
                    }
                }
                
                if (examArgs[1] == "banned")
                {
                    if (results.ContainsKey(username))
                    {
                        results.Remove(username);
                    }
                }
                else
                {
                    int points = int.Parse(examArgs[2]);

                    if (results.ContainsKey(username))
                    {
                        if (points > results[username])
                        {
                            results[username] = points;
                        }
                    }
                    else
                    {
                        results.Add(username, points);
                    }
                }

                command = Console.ReadLine();
            }

            Console.WriteLine("Results:");

            var orderResults = results.OrderByDescending(x => x.Value);

            foreach (var result in orderResults)
            {
                Console.WriteLine($"{result.Key} | {result.Value}");
            }

            Console.WriteLine("Submissions:");

            var orederLanguages = languages.OrderByDescending(x => x.Value);

            foreach (var language in orederLanguages)
            {
                Console.WriteLine($"{language.Key} - {language.Value}");
            }
