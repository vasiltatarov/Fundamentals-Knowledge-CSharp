Snow White loves her dwarfs, but there are so many and she doesn’t know how to order them. Does she order them by name?
Or by color oftheir hat? Or by physics? She can’t decide, so its up to you to write a program that does it for her.
You will be receiving several input lines which contain data about dwarfs in the following format:
{dwarfName} <:> {dwarfHatColor} <:> {dwarfPhysics}
The dwarfName and the dwarfHatColor are strings. The dwarfPhysics is an integer.
You must store the dwarfs in your program. There are several rules though:
If 2 dwarfs have the same name but different color, they should be considered different dwarfs, and you should store both of them.
If 2 dwarfs have the same name and the same color, store the one with the higher physics.
When you receive the command “Once upon a time”, the input ends. You must order the dwarfs by physics in descending order and then by
total count of dwarfs with the same hat color in descending order. Then you must print them all. 
Input
The input will consists of several input lines, containing dwarf data in the format, specified above.
The input ends when you receive the command “Once upon a time”. 
Pesho <:> Red <:> 2000
Tosho <:> Blue <:> 1000
Sasho <:> Yellow <:> 4500
Prakasho <:> Stamat <:> 1000
Once upon a time
Output
As output you must print the dwarfs, ordered in the way , specified above.
The output format is: ({hatColor}) {name} <-> {physics}
(Yellow) Sasho <-> 4500
(Red) Pesho <-> 2000
(Blue) Tosho <-> 1000
(Stamat) Prakasho <-> 1000

        static void Main()
        {
            List<Dwarf> dwarfs = new List<Dwarf>();

            string command = Console.ReadLine();
            while (command != "Once upon a time")
            {
                string[] inputs = command.Split(" <:> ");
                string name = inputs[0];
                string color = inputs[1];
                int physics = int.Parse(inputs[2]);

                Dwarf repeat = dwarfs.Find(x => x.Name == name && x.Color == color);
                if (repeat != null)
                {
                    repeat.Physics = Math.Max(repeat.Physics, physics);
                }
                else
                {
                    Dwarf dwarf = new Dwarf(name, color, physics);
                    dwarfs.Add(dwarf);
                }

                command = Console.ReadLine();
            }

            foreach (Dwarf dwarf in dwarfs.OrderByDescending(x => x.Physics)
                .ThenByDescending(x => dwarfs.Count(y => x.Color == x.Color)))
            {
                Console.WriteLine($"({dwarf.Color}) {dwarf.Name} <-> {dwarf.Physics}");
            }
        }
    }

    public class Dwarf
    {
        public string Name { get; set; }
        public string Color { get; set; }
        public int Physics { get; set; }

        public Dwarf(string name, string color, int physics)
        {
            Name = name;
            Color = color;
            Physics = physics;
        }
    }
